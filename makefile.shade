var BUILD='${Version(1, 0, 0, "alpha6")}'
var VERSION='${BUILD.VERSION}'
var FULL_VERSION='${BUILD.FULL_VERSION}'
set FINAL_MILESTONE='${false}'
var AUTHORS='owin-security contributors'

use-standard-lifecycle
use-standard-goals features='nuget'

functions
  @{
    static bool RELEASE_BUILD;
    static bool OFFICIAL_BUILD;
    static bool FINAL_MILESTONE;
    BuildVersion Version(int major, int minor, int patch, string milestone = "")
    {
      return new BuildVersion 
      {
        MAJOR = major, 
        MINOR = minor, 
        PATCH = patch, 
        MILESTONE = milestone,
      };
    }
    static string BuildDate()
    {
      var now = DateTime.Now;
      return (now.Year - 2011) + DateTime.Now.ToString("MMdd");
    }
    static string BuildNumber()
    {
      var buildNumber = Environment.GetEnvironmentVariable("BUILD_NUMBER");
      if (String.IsNullOrEmpty(buildNumber))
      {
        return "0";
      }
      return buildNumber;
    }
    static string BranchSuffix()
    {
      string branchName = Environment.GetEnvironmentVariable("BRANCH_SUFFIX");
      if (!string.IsNullOrEmpty(branchName))
      {
        return branchName;
      }
      return "";
    }
    static string SourceRevision()
    {
      return Environment.GetEnvironmentVariable("SourceRevision");
    }
    class BuildVersion 
    {
      public int MAJOR {get;set;}
      public int MINOR {get;set;}
      public int PATCH {get;set;}
      public string MILESTONE {get;set;}
      public string PRERELEASE
      {
        get 
        {
		  if (OFFICIAL_BUILD && RELEASE_BUILD && FINAL_MILESTONE)
		  {
			return "";
		  }
		  // -MILESTONE-ymmdd-BUILD_NUMBER-BUILD_SUFFIX
          var pre = "";
          if (!String.IsNullOrEmpty(MILESTONE))
          {
            pre = "-" + MILESTONE;
          }
          if (!RELEASE_BUILD)
          {
            var buildNumber = "000" + Environment.GetEnvironmentVariable("BUILD_NUMBER");
            buildNumber = buildNumber.Substring(buildNumber.Length - 3);
            pre += "-" + BuildDate() + "-" + buildNumber;

		    if (!String.IsNullOrEmpty(BranchSuffix()))
		    {
			  pre += "-" + BranchSuffix();
		    }
          }
          return pre;
        }
      }
      public string VERSION 
      {
        get {return MAJOR + "." + MINOR + "." + PATCH;}
      }
      public string SN_VERSION 
      {
        get { return MAJOR + "." + MINOR + "." + PATCH + ".0"; }
      }
      public string FULL_VERSION 
      {
        get {return MAJOR + "." + MINOR + "." + PATCH + PRERELEASE;}
      }
      public string FILE_VERSION 
      {
        get {return MAJOR + "." + MINOR + "." + BuildDate() + "." + BuildNumber();}
      }
    }
  }
